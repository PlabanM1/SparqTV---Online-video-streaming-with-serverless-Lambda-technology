---
swagger: "2.0"
info:
  version: "1.0"
  title: "coms6998"
host: "j3z4xwt1ch.execute-api.us-west-2.amazonaws.com"
basePath: "/prod"
schemes:
- "https"
paths:
  /addresses:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AddressesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"fetch\"\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n[\n#foreach($address\
                \ in $inputRoot)\n    {\n        \"id\" : \"$address.id\",\n     \
                \   \"city\" : \"$address.city\",\n        \"state\" : \"$address.state\"\
                ,\n        \"apt\" : \"$address.apt\",\n        \"number\" : \"$address.number\"\
                ,\n        \"street\" : \"$address.street\",\n        \"zip_code\"\
                \ : \"$address.zip_code\",\n        \"self\" : {\n            \"href\"\
                \ : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$customer.email\"\
                \n        }\n    }#if($foreach.hasNext),#end\n\n#end\n]"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "AddressPostRequest"
        required: true
        schema:
          $ref: "#/definitions/AddressPostRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AddressDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"create\",\n  \"address\" : {\n    \"city\" : \"$inputRoot.city\"\
            ,\n    \"state\" : \"$inputRoot.state\",\n    \"apt\" : \"$inputRoot.apt\"\
            ,\n    \"street\" : \"$inputRoot.street\",\n    \"number\" : \"$inputRoot.number\"\
            ,\n    \"zip_code\" : \"$inputRoot.zip_code\"\n    }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\",\n  \"self\" : {\n    \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /addresses/{id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"id\": \"$input.params('id')\"\
            \ \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\",\n  \"self\" : {\n    \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "AddressPutRequest"
        required: true
        schema:
          $ref: "#/definitions/AddressPutRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"update\",\n  \"id\" : \"$input.params('id')\",\n  \"address\" :\
            \ {\n    \"city\" : \"$inputRoot.city\",\n    \"state\" : \"$inputRoot.state\"\
            ,\n    \"apt\" : \"$inputRoot.apt\",\n    \"number\" : \"$inputRoot.number\"\
            ,\n    \"street\" : \"$inputRoot.street\",\n    \"zip_code\" : \"$inputRoot.zip_code\"\
            \n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\",\n  \"self\" : {\n    \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"delete\",\n    \"id\": \"$input.params('id')\"\
            \ \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\"\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customers:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomersDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"fetch\"\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n[\n#foreach($customer\
                \ in $inputRoot)\n    {\n        \"email\" : \"$customer.email\",\n\
                \        \"first_name\" : \"$customer.first_name\",\n        \"last_name\"\
                \ : \"$customer.last_name\",\n        \"phone_number\" : \"$customer.phone_number\"\
                ,\n        \"address\" : {\n            \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$customer.address\"\
                \n        },\n        \"self\" : {\n            \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$customer.email\"\
                \n        }\n    }#if($foreach.hasNext),#end\n\n#end\n]"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "CustomerPostRequest"
        required: true
        schema:
          $ref: "#/definitions/CustomerPostRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomerDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n#set($inputAddress\
            \ = $input.path('$.address'))\n{\n  \"operation\" : \"create\",\n  \"\
            customer\" : {\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"\
            first_name\" : \"$inputRoot.first_name\",\n    \"email\" : \"$inputRoot.email\"\
            ,\n    \"phone_number\" : \"$inputRoot.phone_number\",\n    \"address\"\
            \ : {\n      \"city\" : \"$inputAddress.city\",\n      \"state\" : \"\
            $inputAddress.state\",\n      \"apt\" : \"$inputAddress.apt\",\n     \
            \ \"street\" : \"$inputAddress.street\",\n      \"number\" : \"$inputAddress.number\"\
            ,\n      \"zip_code\" : \"$inputAddress.zip_code\"\n    }\n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"email\"\
                \ : \"$inputRoot.email\",\n    \"first_name\" : \"$inputRoot.first_name\"\
                ,\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"phone_number\"\
                \ : \"$inputRoot.phone_number\",\n    \"address\" : {\n        \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.address\"\
                \n    },\n    \"self\" : {\n        \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.email\"\
                \n    }\n}"
          \[409\].*:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customers/{email}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomerDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"fetch\",\n  \"email\" : \"$input.params('email')\"\n}\n"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"email\"\
                \ : \"$inputRoot.email\",\n    \"first_name\" : \"$inputRoot.first_name\"\
                ,\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"phone_number\"\
                \ : \"$inputRoot.phone_number\",\n    \"address\" : {\n        \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.address\"\
                \n    },\n    \"self\" : {\n        \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.email\"\
                \n    }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "CustomerPutRequest"
        required: true
        schema:
          $ref: "#/definitions/CustomerPutRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomerDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n#set($inputAddress\
            \ = $input.path('$.address'))\n{\n  \"operation\" : \"update\",\n  \"\
            customer\" : {\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"\
            first_name\" : \"$inputRoot.first_name\",\n    \"email\" : \"$input.params().get('path').get('email')\"\
            ,\n    \"phone_number\" : \"$inputRoot.phone_number\",\n    \"address\"\
            \ : {\n      \"city\" : \"$inputAddress.city\",\n      \"state\" : \"\
            $inputAddress.state\",\n      \"apt\" : \"$inputAddress.apt\",\n     \
            \ \"street\" : \"$inputAddress.street\",\n      \"number\" : \"$inputAddress.number\"\
            ,\n      \"zip_code\" : \"$inputAddress.zip_code\"\n    }\n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"email\"\
                \ : \"$inputRoot.email\",\n    \"first_name\" : \"$inputRoot.first_name\"\
                ,\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"phone_number\"\
                \ : \"$inputRoot.phone_number\",\n    \"address\" : {\n        \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.address\"\
                \n    },\n    \"self\" : {\n        \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.email\"\
                \n    }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomerDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\n  \"operation\" : \"delete\",\n  \"customer\" : {\n\
            \    \"email\" : \"$input.params().get('path').get('email')\"\n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"email\"\
                \ : \"$inputRoot.email\",\n    \"first_name\" : \"$inputRoot.first_name\"\
                ,\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"phone_number\"\
                \ : \"$inputRoot.phone_number\",\n    \"address\" : {\n        \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.address\"\
                \n    }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customers/{email}/address:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AddressDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"email\": \"\
            $input.params('email')\" \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\",\n  \"self\" : {\n    \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /comments:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "content"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CommentsDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            500:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n[\n#foreach($comment\
                \ in $inputRoot)\n    {\n        \"id\" : \"$comment.id\",\n     \
                \   \"text\" : \"$comment.text\",\n        \"customer\" : {\n    \
                \        \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$comment.customer_ref\"\
                \n        },\n        \"content\" : {\n            \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/contents/$comment.content_ref\"\
                \n        },\n        \"self\" : {\n            \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/comments/$comment.id\"\
                \n        }\n    }#if($foreach.hasNext),#end\n\n#end\n]"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"fetch\",\n  \"comment\" : {\n    \"content_ref\" : \"$input.params('content')\"\
            \n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:commentsControllerTestAlpha/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "CommentPostRequest"
        required: true
        schema:
          $ref: "#/definitions/CommentPostRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CommentDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            500:
              type: "string"
        409:
          description: "409 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"text\" : \"$inputRoot.text\",\n  \"customer\"\
                \ : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.customer\"\
                \n  },\n  \"content\" : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/contents/$inputRoot.content\"\
                \n  },\n  \"self\" : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/comments/$inputRoot.id\"\
                \n  }\n}"
          \[409\].*:
            statusCode: "409"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"create\",\n  \"comment\" : {\n    \"text\" : \"$inputRoot.text\"\
            ,\n    \"customer_ref\" : \"$inputRoot.customer\",\n    \"content_ref\"\
            \ : \"$inputRoot.content\"\n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:commentsControllerTestAlpha/invocations"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /comments/{id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CommentDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            500:
              type: "string"
        404:
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        responses:
          \[404\].*:
            statusCode: "404"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"text\" : \"$inputRoot.text\",\n  \"customer\"\
                \ : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.customer\"\
                \n  },\n  \"content\" : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/contents/$inputRoot.content\"\
                \n  },\n  \"self\" : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/comments/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"id\": \"$input.params('id')\"\
            \ \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:commentsControllerTestAlpha/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "CommentPutRequest"
        required: true
        schema:
          $ref: "#/definitions/CommentPutRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CommentDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            500:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"text\" : \"$inputRoot.text\",\n  \"customer\"\
                \ : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.customer\"\
                \n  },\n  \"content\" : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/contents/$inputRoot.content\"\
                \n  },\n  \"self\" : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/comments/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"update\",\n  \"id\" : \"$input.params('id')\",\n  \"comment\" :\
            \ {\n    \"text\" : \"$inputRoot.text\",\n    \"customer_ref\" : \"$inputRoot.customer\"\
            ,\n    \"content_ref\" : \"$inputRoot.content\"\n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:commentsControllerTestAlpha/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CommentDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            500:
              type: "string"
        404:
          description: "404 response"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"text\" : \"$inputRoot.text\",\n  \"customer\"\
                \ : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.customer\"\
                \n  },\n  \"content\" : {\n    \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/contents/$inputRoot.content\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
          \[400\].*:
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"delete\",\n    \"id\": \"$input.params('id')\"\
            \ \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:commentsControllerTestAlpha/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /content-catalog:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ContentCatalogsDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetchAll\",\n    \"type\" :\
            \ \"content_catalog\"\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "ContentCatalogPostRequest"
        required: true
        schema:
          $ref: "#/definitions/ContentCatalogPostRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ContentCatalogDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"create\",\n  \"type\" : \"content_catalog\",\n  \"content\" : {\n\
            \    \"name\" : \"$inputRoot.name\"\n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"  
  /content-catalog/{cid}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ContentCatalogDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"type\" : \"\
            content_catalog\",\n    \"id\": \"$input.params('cid')\" \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /property:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "cid"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PropertiesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetchAll\",\n    \"type\" :\
            \ \"property\",\n    \"cid\" : \"$input.params('cid')\"\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "PropertyPostRequest"
        required: true
        schema:
          $ref: "#/definitions/PropertyPostRequest"
      
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
        400:
          description: "400 response"
        500:
          description: "500 response"
        404:
          description: "404 response"
        405:
          description: "405 response"
        409:
          description: "409 response"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"create\",\n  \"type\" : \"property\",\n  \"content\" : {\n    \"\
            name\" : \"$inputRoot.name\",\n    \"cid\" : \"$input.params('cid')\"\n\
            \  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      parameters:
      - name: "cid"
        in: "query"
        required: false
        type: "string"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /property/{pid}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/PropertyDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"type\" : \"\
            property\",\n    \"id\": \"$input.params('pid')\" \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /franchise:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "pid"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/FranchisesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetchAll\",\n    \"type\" :\
            \ \"franchise\",\n    \"pid\" : \"$input.params('pid')\"\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "FranchisePostRequest"
        required: true
        schema:
          $ref: "#/definitions/FranchisePostRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/FranchisesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"create\",\n  \"type\" : \"franchise\",\n  \"content\" : {\n    \"\
            name\" : \"$inputRoot.name\",\n    \"pid\" : \"$input.params('pid')\"\n\
            \  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /franchise/{fid}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "fid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/FranchiseDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"type\" : \"\
            franchise\",\n    \"id\": \"$input.params('fid')\" \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "fid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /series:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "fid"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SeriesesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetchAll\",\n    \"type\" :\
            \ \"series\",\n    \"fid\" : \"$input.params('fid')\"\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "SeriesPostRequest"
        required: true
        schema:
          $ref: "#/definitions/SeriesPostRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SeriesesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"create\",\n  \"type\" : \"series\",\n  \"content\" : {\n    \"name\"\
            \ : \"$inputRoot.name\",\n    \"fid\" : \"$input.params('fid')\"\n  }\n\
            }"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /series/{sid}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "sid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/SeriesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"type\" : \"\
            series\",\n    \"id\": \"$input.params('sid')\" \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "sid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /episode:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "sid"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/EpisodesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetchAll\",\n    \"type\" :\
            \ \"episodes\",\n    \"sid\" : \"$input.params('sid')\"\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "EpisodePostRequest"
        required: true
        schema:
          $ref: "#/definitions/EpisodePostRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/EpisodeDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"create\",\n  \"type\" : \"episodes\",\n  \"content\" : {\n    \"\
            name\" : \"$inputRoot.name\",\n    \"sid\" : \"$input.params('sid')\"\n\
            \  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /episode/{eid}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/EpisodesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        405:
          description: "405 response"
          headers:
            405:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
        409:
          description: "409 response"
          headers:
            409:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
          \[405\].*:
            statusCode: "405"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"type\" : \"\
            episodes\",\n    \"id\": \"$input.params('eid')\" \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:Content/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "eid"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"

definitions:
  Empty:
    title: "Empty Schema"
    type: "object"
  Self:
    description: "Reference to itself"
    type: "object"
    properties:
      href:
        description: "Absolute URL pointing to itself"
        type: "string"

  CustomerEmail:
    title: "Email"
    description: "Personal email address"
    type: "string"
  CustomerFirstName:
    title: "First name"
    type: "string"
  CustomerLastName:
    title: "Last name"
    type: "string"
  CustomerPhoneNumber:
    title: "Phone number"
    description: "Personal phone number"
    type: "string"
  CustomerAddress:
    title: "Address"
    type: "object"
    properties:
      href:
        description: "Absolute URL pointing to this customer's address"
        type: "string"

  AddressId:
    title: "Id"
    description: "USPS barcode"
    type: "string"
  AddressStreet:
    title: "Street"
    description: "Street name"
    type: "string"
  AddressNumber:
    title: "Number"
    description: "Number within street"
    type: "string"
  AddressApt:
    title: "Apartment"
    type: "string"
  AddressZipCode:
    title: "Zip code"
    type: "string"
  AddressCity:
    title: "City"
    type: "string"
  AddressState:
    title: "State"
    description: "State abbreviated to two letters (for example, NY, CA, IL...)"
    type: "string"

  CommentId:
    title: "Id"
    description: "UUID"
    type: "string"
  CommentCustomer:
    title: "Customer"
    type: "object"
    properties:
      href:
        description: "Absolute URL pointing to this comments's customer"
        type: "string"
  CommentCustomerRef:
    title: "Customer email"
    type: "string"
  CommentContent:
    title: "Content"
    type: "object"
    properties:
      href:
        description: "Absolute URL pointing to this comments's content"
        type: "string"
  CommentContentRef:
    title: "Content id"
    type: "string"
  CommentText:
    title: "Text"
    description: "Text content"
    type: "string"

  ContentCatalogId:
    title: "cid"
    description: "Id for the content catalog. Is a UUID"
    type: "string"
  ContentCatalogName:
    title: "Name"
    description: "Name for any content catalog."
    type: "string"
  PropertyId:
    title: "pid"
    description: "Id for the property. Is a UUID"
    type: "string"
  PropertyName:
    title: "Name"
    description: "Name of any property (For e.g. HBO, CBS, ABC, ESPN etc.)"
    type: "string"
  FranchiseId:
    title: "fid"
    description: "Id for the franchise. Is a UUID"
    type: "string"
  FranchiseName:
    title: "Name"
    description: "Name of any franchise (For e.g. Game of Thrones, Survivor etc.)"
    type: "string"
  SeriesId:
    title: "sid"
    description: "Id for the series. Is a UUID"
    type: "string"
  SeriesName:
    title: "Name"
    description: "Name of any series (For e.g. Season 1, Season 2, Christmas Specials etc.)"
    type: "string"
  EpisodeId:
    title: "eid"
    description: "Id for the episode. Is a UUID"
    type: "string"
  EpisodeName:
    title: "Name"
    description: "Name of any episode (For e.g. Episode 1, The one where Ross and Rache take a break etc.)"
    type: "string"

  ContentCatalogDataResponse:
    title: "ContentCatalog"
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        $ref: "#/definitions/ContentCatalogId"
      name:
        $ref: "#/definitions/ContentCatalogName"
  ContentCatalogsDataResponse:
    title: "Array of ContentCatalog"
    type: "array"
    items: 
      $ref: "#/definitions/ContentCatalogDataResponse"
  ContentCatalogPostRequest:
    title: "New Content Catalog"
    description: "New Content Catalog"
    type: "object"
    required:
    - "name"
    properties:
      name:
        $ref: "#/definitions/ContentCatalogName"

  PropertyDataResponse:
    title: "Property"
    type: "object"
    required:
    - "id"
    - "name"
    - "cid"
    properties:
      id:
        $ref: "#/definitions/PropertyId"
      name:
        $ref: "#/definitions/PropertyName"
      cid:
        $ref: "#/definitions/ContentCatalogId"
  PropertiesDataResponse:
    title: "Array of Property"
    type: "array"
    items: 
      $ref: "#/definitions/PropertyDataResponse"
  PropertyPostRequest:
    title: "New Property"
    description: "New Property"
    type: "object"
    required:
    - "name"
    - "cid"
    properties:
      name:
        $ref: "#/definitions/PropertyName"
      cid:
        $ref: "#/definitions/ContentCatalogId"

  FranchiseDataResponse:
    title: "Franchise"
    type: "object"
    required:
    - "id"
    - "name"
    - "pid"
    properties:
      id:
        $ref: "#/definitions/FranchiseId"
      name:
        $ref: "#/definitions/FranchiseName"
      pid:
        $ref: "#/definitions/PropertyId"
  FranchisesDataResponse:
    title: "Array of Franchise"
    type: "array"
    items: 
      $ref: "#/definitions/FranchiseDataResponse"
  FranchisePostRequest:
    title: "New Franchise"
    description: "New Franchise"
    type: "object"
    required:
    - "name"
    - "pid"
    properties:
      name:
        $ref: "#/definitions/FranchiseName"
      pid:
        $ref: "#/definitions/PropertyId"

  SeriesDataResponse:
    title: "Series"
    type: "object"
    required:
    - "id"
    - "name"
    - "fid"
    properties:
      id:
        $ref: "#/definitions/SeriesId"
      name:
        $ref: "#/definitions/SeriesName"
      fid:
        $ref: "#/definitions/FranchiseId"
  SeriesesDataResponse:
    title: "Array of Series"
    type: "array"
    items: 
      $ref: "#/definitions/SeriesDataResponse"
  SeriesPostRequest:
    title: "New Series"
    description: "New Series"
    type: "object"
    required:
    - "name"
    - "fid"
    properties:
      name:
        $ref: "#/definitions/SeriesName"
      fid:
        $ref: "#/definitions/FranchiseId"

  EpisodeDataResponse:
    title: "Episode"
    type: "object"
    required:
    - "id"
    - "name"
    - "sid"
    properties:
      id:
        $ref: "#/definitions/EpisodeId"
      name:
        $ref: "#/definitions/EpisodeName"
      sid:
        $ref: "#/definitions/SeriesId"
  EpisodesDataResponse:
    title: "Array of Episode"
    type: "array"
    items: 
      $ref: "#/definitions/EpisodeDataResponse"
  EpisodePostRequest:
    title: "New Episode"
    description: "New Episode"
    type: "object"
    required:
    - "name"
    - "sid"
    properties:
      name:
        $ref: "#/definitions/EpisodeName"
      sid:
        $ref: "#/definitions/SeriesId"

  AddressDataResponse:
    title: "Address"
    type: "object"
    required:
    - "id"
    - "street"
    - "number"
    - "apt"
    - "zip_code"
    - "city"
    - "state"
    - "self"
    properties:
      id:
        $ref: "#/definitions/AddressId"
      street:
        $ref: "#/definitions/AddressStreet"
      number:
        $ref: "#/definitions/AddressNumber"
      apt:
        $ref: "#/definitions/AddressApt"
      zip_code:
        $ref: "#/definitions/AddressZipCode"
      city:
        $ref: "#/definitions/AddressCity"
      state:
        $ref: "#/definitions/AddressState"
      self:
        $ref: "#/definitions/Self"
  AddressesDataResponse:
    title: "Array of Addresses"
    type: "array"
    items: 
      $ref: "#/definitions/AddressDataResponse"
  AddressPostRequest:
    title: "New Address information"
    description: "Full US address information"
    type: "object"
    required:
    - "street"
    - "number"
    - "apt"
    - "zip_code"
    - "city"
    - "state"
    properties:
      street:
        $ref: "#/definitions/AddressStreet"
      number:
        $ref: "#/definitions/AddressNumber"
      apt:
        $ref: "#/definitions/AddressApt"
      zip_code:
        $ref: "#/definitions/AddressZipCode"
      city:
        $ref: "#/definitions/AddressCity"
      state:
        $ref: "#/definitions/AddressState"
  AddressPutRequest:
    title: "Address information to update"
    description: "US address information that wants to be updated"
    type: "object"
    properties:
      street:
        $ref: "#/definitions/AddressStreet"
      number:
        $ref: "#/definitions/AddressNumber"
      apt:
        $ref: "#/definitions/AddressApt"
      zip_code:
        $ref: "#/definitions/AddressZipCode"
      city:
        $ref: "#/definitions/AddressCity"
      state:
        $ref: "#/definitions/AddressState"

  CustomerDataResponse:
    title: "Customer"
    type: "object"
    required:
    - "email"
    - "first_name"
    - "last_name"
    - "phone_number"
    - "address"
    - "self"
    properties:
      email:
        $ref: "#/definitions/CustomerEmail"
      first_name:
        $ref: "#/definitions/CustomerFirstName"
      last_name:
        $ref: "#/definitions/CustomerLastName"
      phone_number:
        $ref: "#/definitions/CustomerPhoneNumber"
      address:
        $ref: "#/definitions/CustomerAddress"
      self:
        $ref: "#/definitions/Self"
  CustomersDataResponse:
    title: "Array of Customers"
    type: "array"
    items: 
      $ref: "#/definitions/CustomerDataResponse"
  CustomerPostRequest:
    title: "New Customer information"
    description: "All information about a customer"
    type: "object"
    required:
    - "email"
    - "first_name"
    - "last_name"
    - "phone_number"
    - "address"
    properties:
      email:
        $ref: "#/definitions/CustomerEmail"
      first_name:
        $ref: "#/definitions/CustomerFirstName"
      last_name:
        $ref: "#/definitions/CustomerLastName"
      phone_number:
        $ref: "#/definitions/CustomerPhoneNumber"
      address:
        $ref: "#/definitions/AddressPostRequest"
  CustomerPutRequest:
    title: "Customer information to update"
    description: "Customer information that wants to be updated"
    type: "object"
    properties:
      first_name:
        $ref: "#/definitions/CustomerFirstName"
      last_name:
        $ref: "#/definitions/CustomerLastName"
      phone_number:
        $ref: "#/definitions/CustomerPhoneNumber"

  CommentDataResponse:
    title: "Comment"
    type: "object"
    required:
    - "id"
    - "customer"
    - "content"
    - "text"
    properties:
      id:
        $ref: "#/definitions/CommentId"
      customer:
        $ref: "#/definitions/CommentCustomer"
      content:
        $ref: "#/definitions/CommentContent"
      text:
        $ref: "#/definitions/CommentText"
      self:
        $ref: "#/definitions/Self"
  CommentsDataResponse:
    title: "Array of Comments"
    type: "array"
    items: 
      $ref: "#/definitions/CommentDataResponse"
  CommentPostRequest:
    title: "New Comment information"
    description: "All information about a comment"
    type: "object"
    required:
    - "customer"
    - "content"
    - "text"
    properties:
      customer:
        $ref: "#/definitions/CommentCustomerRef"
      content:
        $ref: "#/definitions/CommentContentRef"
      text:
        $ref: "#/definitions/CommentText"
  CommentPutRequest:
    title: "Comment information to update"
    description: "Comment information that wants to be updated"
    type: "object"
    properties:
      text:
        $ref: "#/definitions/CommentText"
