---
swagger: "2.0"
info:
  version: "1.0"
  title: "coms6998"
host: "j3z4xwt1ch.execute-api.us-west-2.amazonaws.com"
basePath: "/prod"
schemes:
- "https"
paths:
  /addresses:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AddressesDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"fetch\"\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n[\n#foreach($address\
                \ in $inputRoot)\n    {\n        \"id\" : \"$address.id\",\n     \
                \   \"city\" : \"$address.city\",\n        \"state\" : \"$address.state\"\
                ,\n        \"apt\" : \"$address.apt\",\n        \"number\" : \"$address.number\"\
                ,\n        \"street\" : \"$address.street\",\n        \"zip_code\"\
                \ : \"$address.zip_code\",\n        \"self\" : {\n            \"href\"\
                \ : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$customer.email\"\
                \n        }\n    }#if($foreach.hasNext),#end\n\n#end\n]"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "AddressPostRequest"
        required: true
        schema:
          $ref: "#/definitions/AddressPostRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AddressDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"create\",\n  \"address\" : {\n    \"city\" : \"$inputRoot.city\"\
            ,\n    \"state\" : \"$inputRoot.state\",\n    \"apt\" : \"$inputRoot.apt\"\
            ,\n    \"street\" : \"$inputRoot.street\",\n    \"number\" : \"$inputRoot.number\"\
            ,\n    \"zip_code\" : \"$inputRoot.zip_code\"\n    }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\",\n  \"self\" : {\n    \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /addresses/{id}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"id\": \"$input.params('id')\"\
            \ \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\",\n  \"self\" : {\n    \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "AddressPutRequest"
        required: true
        schema:
          $ref: "#/definitions/AddressPutRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"update\",\n  \"id\" : \"$input.params('id')\",\n  \"address\" :\
            \ {\n    \"city\" : \"$inputRoot.city\",\n    \"state\" : \"$inputRoot.state\"\
            ,\n    \"apt\" : \"$inputRoot.apt\",\n    \"number\" : \"$inputRoot.number\"\
            ,\n    \"street\" : \"$inputRoot.street\",\n    \"zip_code\" : \"$inputRoot.zip_code\"\
            \n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\",\n  \"self\" : {\n    \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"delete\",\n    \"id\": \"$input.params('id')\"\
            \ \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\"\n}"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customers:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomersDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"fetch\"\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n[\n#foreach($customer\
                \ in $inputRoot)\n    {\n        \"email\" : \"$customer.email\",\n\
                \        \"first_name\" : \"$customer.first_name\",\n        \"last_name\"\
                \ : \"$customer.last_name\",\n        \"phone_number\" : \"$customer.phone_number\"\
                ,\n        \"address\" : {\n            \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$customer.address\"\
                \n        },\n        \"self\" : {\n            \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$customer.email\"\
                \n        }\n    }#if($foreach.hasNext),#end\n\n#end\n]"
          \[500\].*:
            statusCode: "500"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    post:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "CustomerPostRequest"
        required: true
        schema:
          $ref: "#/definitions/CustomerPostRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomerDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
        409:
          description: "409 response"
          headers:
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n#set($inputAddress\
            \ = $input.path('$.address'))\n{\n  \"operation\" : \"create\",\n  \"\
            customer\" : {\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"\
            first_name\" : \"$inputRoot.first_name\",\n    \"email\" : \"$inputRoot.email\"\
            ,\n    \"phone_number\" : \"$inputRoot.phone_number\",\n    \"address\"\
            \ : {\n      \"city\" : \"$inputAddress.city\",\n      \"state\" : \"\
            $inputAddress.state\",\n      \"apt\" : \"$inputAddress.apt\",\n     \
            \ \"street\" : \"$inputAddress.street\",\n      \"number\" : \"$inputAddress.number\"\
            ,\n      \"zip_code\" : \"$inputAddress.zip_code\"\n    }\n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"email\"\
                \ : \"$inputRoot.email\",\n    \"first_name\" : \"$inputRoot.first_name\"\
                ,\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"phone_number\"\
                \ : \"$inputRoot.phone_number\",\n    \"address\" : {\n        \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.address\"\
                \n    },\n    \"self\" : {\n        \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.email\"\
                \n    }\n}"
          \[409\].*:
            statusCode: "409"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customers/{email}:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomerDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"operation\"\
            \ : \"fetch\",\n  \"email\" : \"$input.params('email')\"\n}\n"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"email\"\
                \ : \"$inputRoot.email\",\n    \"first_name\" : \"$inputRoot.first_name\"\
                ,\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"phone_number\"\
                \ : \"$inputRoot.phone_number\",\n    \"address\" : {\n        \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.address\"\
                \n    },\n    \"self\" : {\n        \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.email\"\
                \n    }\n}"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    put:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "CustomerPutRequest"
        required: true
        schema:
          $ref: "#/definitions/CustomerPutRequest"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomerDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "#set($inputRoot = $input.path('$'))\n#set($inputAddress\
            \ = $input.path('$.address'))\n{\n  \"operation\" : \"update\",\n  \"\
            customer\" : {\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"\
            first_name\" : \"$inputRoot.first_name\",\n    \"email\" : \"$input.params().get('path').get('email')\"\
            ,\n    \"phone_number\" : \"$inputRoot.phone_number\",\n    \"address\"\
            \ : {\n      \"city\" : \"$inputAddress.city\",\n      \"state\" : \"\
            $inputAddress.state\",\n      \"apt\" : \"$inputAddress.apt\",\n     \
            \ \"street\" : \"$inputAddress.street\",\n      \"number\" : \"$inputAddress.number\"\
            ,\n      \"zip_code\" : \"$inputAddress.zip_code\"\n    }\n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"email\"\
                \ : \"$inputRoot.email\",\n    \"first_name\" : \"$inputRoot.first_name\"\
                ,\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"phone_number\"\
                \ : \"$inputRoot.phone_number\",\n    \"address\" : {\n        \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.address\"\
                \n    },\n    \"self\" : {\n        \"href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/customers/$inputRoot.email\"\
                \n    }\n}"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    delete:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/CustomerDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\n  \"operation\" : \"delete\",\n  \"customer\" : {\n\
            \    \"email\" : \"$input.params().get('path').get('email')\"\n  }\n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:customersController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n    \"email\"\
                \ : \"$inputRoot.email\",\n    \"first_name\" : \"$inputRoot.first_name\"\
                ,\n    \"last_name\" : \"$inputRoot.last_name\",\n    \"phone_number\"\
                \ : \"$inputRoot.phone_number\",\n    \"address\" : {\n        \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.address\"\
                \n    }\n}"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_templates"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,OPTIONS,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
  /customers/{email}/address:
    get:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AddressDataResponse"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        400:
          description: "400 response"
          headers:
            400:
              type: "string"
        500:
          description: "500 response"
          headers:
            500:
              type: "string"
        404:
          description: "404 response"
          headers:
            404:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\n    \"operation\" : \"fetch\",\n    \"email\": \"\
            $input.params('email')\" \n}"
        uri: "arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:837747084991:function:addressController/invocations"
        responses:
          \[404\].*:
            statusCode: "404"
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"id\"\
                \ : \"$inputRoot.id\",\n  \"city\" : \"$inputRoot.city\",\n  \"state\"\
                \ : \"$inputRoot.state\",\n  \"apt\" : \"$inputRoot.apt\",\n  \"number\"\
                \ : \"$inputRoot.number\",\n  \"street\" : \"$inputRoot.street\",\n\
                \  \"zip_code\" : \"$inputRoot.zip_code\",\n  \"self\" : {\n    \"\
                href\" : \"https://j3z4xwt1ch.execute-api.us-west-2.amazonaws.com/prod/addresses/$inputRoot.id\"\
                \n  }\n}"
          \[500\].*:
            statusCode: "500"
          \[400\].*:
            statusCode: "400"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        type: "aws"
    options:
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Headers:
              type: "string"
      x-amazon-apigateway-integration:
        credentials: "arn:aws:iam::837747084991:role/apiGatewayToLambda"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        type: "mock"
definitions:
  Empty:
    title: "Empty Schema"
    type: "object"
  Self:
    description: "Reference to itself"
    type: "object"
    properties:
      href:
        description: "Absolute URL pointing to itself"
        type: "string"

  CustomerEmail:
    title: "Email"
    description: "Personal email address"
    type: "string"
  CustomerFirstName:
    title: "First name"
    type: "string"
  CustomerLastName:
    title: "Last name"
    type: "string"
  CustomerPhoneNumber:
    title: "Phone number"
    description: "Personal phone number"
    type: "string"
  CustomerAddress:
    title: "Address"
    type: "object"
    properties:
      href:
        description: "Absolute URL pointing to this customer's address"
        type: "string"

  AddressId:
    title: "Id"
    description: "USPS barcode"
    type: "string"
  AddressStreet:
    title: "Street"
    description: "Street name"
    type: "string"
  AddressNumber:
    title: "Number"
    description: "Number within street"
    type: "string"
  AddressApt:
    title: "Apartment"
    type: "string"
  AddressZipCode:
    title: "Zip code"
    type: "string"
  AddressCity:
    title: "City"
    type: "string"
  AddressState:
    title: "State"
    description: "State abbreviated to two letters (for example, NY, CA, IL...)"
    type: "string"

  AddressDataResponse:
    title: "Address"
    type: "object"
    required:
    - "id"
    - "street"
    - "number"
    - "apt"
    - "zip_code"
    - "city"
    - "state"
    - "self"
    properties:
      id:
        $ref: "#/definitions/AddressId"
      street:
        $ref: "#/definitions/AddressStreet"
      number:
        $ref: "#/definitions/AddressNumber"
      apt:
        $ref: "#/definitions/AddressApt"
      zip_code:
        $ref: "#/definitions/AddressZipCode"
      city:
        $ref: "#/definitions/AddressCity"
      state:
        $ref: "#/definitions/AddressState"
      self:
        $ref: "#/definitions/Self"
  AddressesDataResponse:
    title: "Array of Addresses"
    type: "array"
    items: 
      $ref: "#/definitions/AddressDataResponse"
  AddressPostRequest:
    title: "New Address information"
    description: "Full US address information"
    type: "object"
    required:
    - "street"
    - "number"
    - "apt"
    - "zip_code"
    - "city"
    - "state"
    properties:
      street:
        $ref: "#/definitions/AddressStreet"
      number:
        $ref: "#/definitions/AddressNumber"
      apt:
        $ref: "#/definitions/AddressApt"
      zip_code:
        $ref: "#/definitions/AddressZipCode"
      city:
        $ref: "#/definitions/AddressCity"
      state:
        $ref: "#/definitions/AddressState"
  AddressPutRequest:
    title: "Address information to update"
    description: "US address information that wants to be updated"
    type: "object"
    properties:
      street:
        $ref: "#/definitions/AddressStreet"
      number:
        $ref: "#/definitions/AddressNumber"
      apt:
        $ref: "#/definitions/AddressApt"
      zip_code:
        $ref: "#/definitions/AddressZipCode"
      city:
        $ref: "#/definitions/AddressCity"
      state:
        $ref: "#/definitions/AddressState"

  CustomerDataResponse:
    title: "Customer"
    type: "object"
    required:
    - "email"
    - "first_name"
    - "last_name"
    - "phone_number"
    - "address"
    - "self"
    properties:
      email:
        $ref: "#/definitions/CustomerEmail"
      first_name:
        $ref: "#/definitions/CustomerFirstName"
      last_name:
        $ref: "#/definitions/CustomerLastName"
      phone_number:
        $ref: "#/definitions/CustomerPhoneNumber"
      address:
        $ref: "#/definitions/CustomerAddress"
      self:
        $ref: "#/definitions/Self"
  CustomersDataResponse:
    title: "Array of Customers"
    type: "array"
    items: 
      $ref: "#/definitions/CustomerDataResponse"
  CustomerPostRequest:
    title: "New Customer information"
    description: "All information about a customer"
    type: "object"
    required:
    - "email"
    - "first_name"
    - "last_name"
    - "phone_number"
    - "address"
    properties:
      email:
        $ref: "#/definitions/CustomerEmail"
      first_name:
        $ref: "#/definitions/CustomerFirstName"
      last_name:
        $ref: "#/definitions/CustomerLastName"
      phone_number:
        $ref: "#/definitions/CustomerPhoneNumber"
      address:
        $ref: "#/definitions/AddressPostRequest"
  CustomerPutRequest:
    title: "Customer information to update"
    description: "Customer information that wants to be updated"
    type: "object"
    properties:
      first_name:
        $ref: "#/definitions/CustomerFirstName"
      last_name:
        $ref: "#/definitions/CustomerLastName"
      phone_number:
        $ref: "#/definitions/CustomerPhoneNumber"
